# This workflow will build a Java Spring Boot Application with Maven then run test cases.
name: Build and Test Java Spring Boot Application

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  build-and-run-tests:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:latest

        env:
          POSTGRES_USER: postgres
          # POSTGRES_PASSWORD: postgres
          POSTGRES_HOST_AUTH_METHOD: trust
          POSTGRES_DB: smart_inventory

        # Set health checks to wait until Postgres has started.
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

        ports:
          # Maps the TCP port 5432 on the service container to the host.
          - 5432:5432

    steps:
      - name: Pull repository
        uses: actions/checkout@v4.1.2

      - name: Set up JDK
        uses: actions/setup-java@v4.2.1
        with:
          java-version: "21"
          distribution: "temurin"
          # Uncomment and configure if needed.
          # cache: maven

      - name: Run unit tests
        run: mvn test

      - name: Generate HTML test report
        run: mvn surefire-report:report

      # Uploads the full dependency graph to GitHub to improve the quality of Dependabot alerts this repository can receive (Optional).
      # - name: Update dependency graph
      #   uses: advanced-security/maven-dependency-submission-action@571e99aab1055c2e71a1e2309b9691de18d6b7d6

      - name: Build Jar file
        # Skip tests since they were already run.
        run: mvn package -DskipTests

      - name: Save Jar file
        uses: actions/upload-artifact@v4.3.1
        with:
          name: smart-inventory-0.0.1-SNAPSHOT
          path: target/smart-inventory-0.0.1-SNAPSHOT.jar
          retention-days: 1
