package sg.edu.ntu.simpleums.serviceImpls;

import java.util.List;

import org.springframework.stereotype.Service;

import sg.edu.ntu.simpleums.entities.User;
import sg.edu.ntu.simpleums.entities.UserRole;
import sg.edu.ntu.simpleums.exceptions.UserNotFoundException;
import sg.edu.ntu.simpleums.exceptions.UserRoleNotFoundException;
import sg.edu.ntu.simpleums.repositories.UserRepository;
import sg.edu.ntu.simpleums.repositories.UserRoleRepository;
import sg.edu.ntu.simpleums.services.UserService;

@Service
public class UserServiceImpl implements UserService {

    private UserRepository userRepository;
    private UserRoleRepository userRoleRepository;

    public UserServiceImpl(UserRepository userRepository, UserRoleRepository userRoleRepository) {
        this.userRepository = userRepository;
        this.userRoleRepository = userRoleRepository;
    }

    @Override
    public User createUser(User user) {
        return userRepository.save(user);
    }

    @Override
    public User getOneUser(Long id) {
        return userRepository.findById(id).orElseThrow(() -> new UserNotFoundException(id));
    }

    @Override
    public List<User> getAllUsers() {
        return userRepository.findAll();
    }

    @Override
    public User updateUser(Long id, User user) {
        User dbUser = userRepository.findById(id).orElseThrow(() -> new UserNotFoundException(id));

        dbUser.setUsername(user.getUsername());
        dbUser.setFirstName(user.getFirstName());
        dbUser.setLastName(user.getLastName());
        dbUser.setContactNo(user.getContactNo());
        dbUser.setEmail(user.getEmail());
        
        return userRepository.save(dbUser);
    }

    @Override
    public void deleteUser(Long id) {
        userRepository.deleteById(id);
    }

    @Override
    public User addUserRoleToUser(Long userId, Long roleId) {
        User dbUser = userRepository.findById(userId).orElseThrow(() -> new UserNotFoundException(userId));
        UserRole dbUserRole = userRoleRepository.findById(roleId).orElseThrow(() -> new UserRoleNotFoundException(roleId)); 

        dbUser.getRoles().add(dbUserRole);
        userRepository.save(dbUser);
        return dbUser;
    }
    
}
